// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namecard/nameCard.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type History struct {
	SentTime time.Time `protobuf:"bytes,1,opt,name=sent_time,json=sentTime,proto3,stdtime" json:"sent_time" yaml:"sent_time"`
	Address  string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_efbb1bf7391ab55a, []int{0}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetSentTime() time.Time {
	if m != nil {
		return m.SentTime
	}
	return time.Time{}
}

func (m *History) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NameCard struct {
	Address      string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name         string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImageUrl     string     `protobuf:"bytes,3,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	SelfIntro    string     `protobuf:"bytes,4,opt,name=selfIntro,proto3" json:"selfIntro,omitempty"`
	SentInfo     []*History `protobuf:"bytes,5,rep,name=sent_info,json=sentInfo,proto3" json:"sent_info,omitempty"`
	ReceivedInfo []*History `protobuf:"bytes,6,rep,name=received_info,json=receivedInfo,proto3" json:"received_info,omitempty"`
}

func (m *NameCard) Reset()         { *m = NameCard{} }
func (m *NameCard) String() string { return proto.CompactTextString(m) }
func (*NameCard) ProtoMessage()    {}
func (*NameCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_efbb1bf7391ab55a, []int{1}
}
func (m *NameCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameCard.Merge(m, src)
}
func (m *NameCard) XXX_Size() int {
	return m.Size()
}
func (m *NameCard) XXX_DiscardUnknown() {
	xxx_messageInfo_NameCard.DiscardUnknown(m)
}

var xxx_messageInfo_NameCard proto.InternalMessageInfo

func (m *NameCard) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NameCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameCard) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *NameCard) GetSelfIntro() string {
	if m != nil {
		return m.SelfIntro
	}
	return ""
}

func (m *NameCard) GetSentInfo() []*History {
	if m != nil {
		return m.SentInfo
	}
	return nil
}

func (m *NameCard) GetReceivedInfo() []*History {
	if m != nil {
		return m.ReceivedInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*History)(nil), "mattverse.cardhaus.namecard.History")
	proto.RegisterType((*NameCard)(nil), "mattverse.cardhaus.namecard.NameCard")
}

func init() { proto.RegisterFile("namecard/nameCard.proto", fileDescriptor_efbb1bf7391ab55a) }

var fileDescriptor_efbb1bf7391ab55a = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0xe3, 0xb6, 0xff, 0x7e, 0xb8, 0x7f, 0x24, 0x64, 0x21, 0x11, 0x85, 0x2a, 0xa9, 0x22,
	0x86, 0x4e, 0xb6, 0x54, 0x36, 0x36, 0xca, 0xd2, 0x2e, 0x0c, 0x15, 0x5d, 0x58, 0x90, 0xdb, 0x38,
	0x69, 0xa4, 0x24, 0xae, 0x6c, 0xb7, 0xa2, 0x4c, 0x3c, 0x42, 0x1f, 0xab, 0x63, 0x47, 0xa6, 0x82,
	0xda, 0x37, 0xe0, 0x09, 0x90, 0xf3, 0x05, 0x2c, 0x48, 0x6c, 0xf7, 0xf8, 0x9e, 0xdf, 0x91, 0xce,
	0x4d, 0xe0, 0x79, 0x42, 0x63, 0x36, 0xa3, 0xc2, 0x23, 0x7a, 0xb8, 0xa5, 0xc2, 0xc3, 0x0b, 0xc1,
	0x15, 0x47, 0x17, 0x31, 0x55, 0x6a, 0xc5, 0x84, 0x64, 0x58, 0xaf, 0xe7, 0x74, 0x29, 0x71, 0xe1,
	0xb5, 0xce, 0x02, 0x1e, 0xf0, 0xd4, 0x47, 0xf4, 0x94, 0x21, 0x96, 0x13, 0x70, 0x1e, 0x44, 0x8c,
	0xa4, 0x6a, 0xba, 0xf4, 0x89, 0x0a, 0x63, 0x26, 0x15, 0x8d, 0x17, 0x99, 0xc1, 0x7d, 0x86, 0x8d,
	0x61, 0x28, 0x15, 0x17, 0x6b, 0x34, 0x81, 0x2d, 0xc9, 0x12, 0xf5, 0xa8, 0x2d, 0x26, 0xe8, 0x82,
	0x5e, 0xbb, 0x6f, 0xe1, 0x8c, 0xc7, 0x05, 0x8f, 0xef, 0x0b, 0x7e, 0xd0, 0xd9, 0xee, 0x1d, 0xe3,
	0x63, 0xef, 0x9c, 0xae, 0x69, 0x1c, 0x5d, 0xbb, 0x25, 0xea, 0x6e, 0xde, 0x1c, 0x30, 0x6e, 0x6a,
	0xad, 0xcd, 0xc8, 0x84, 0x0d, 0xea, 0x79, 0x82, 0x49, 0x69, 0x56, 0xba, 0xa0, 0xd7, 0x1a, 0x17,
	0xd2, 0x7d, 0xa9, 0xc0, 0xe6, 0x5d, 0x5e, 0xf1, 0xbb, 0x0d, 0xfc, 0xb0, 0x21, 0x04, 0x6b, 0xba,
	0x65, 0x4e, 0xa7, 0x33, 0xb2, 0x60, 0x33, 0x8c, 0x69, 0xc0, 0x26, 0x22, 0x32, 0xab, 0xe9, 0x7b,
	0xa9, 0x51, 0x47, 0xf7, 0x88, 0xfc, 0x51, 0xa2, 0x04, 0x37, 0x6b, 0xe9, 0xf2, 0xeb, 0x01, 0xdd,
	0xe4, 0x2d, 0xc3, 0xc4, 0xe7, 0xe6, 0xbf, 0x6e, 0xb5, 0xd7, 0xee, 0x5f, 0xe2, 0x5f, 0x0e, 0x8b,
	0xf3, 0xf3, 0x64, 0x8d, 0x46, 0x89, 0xcf, 0xd1, 0x08, 0x9e, 0x08, 0x36, 0x63, 0xe1, 0x8a, 0x79,
	0x59, 0x4c, 0xfd, 0x0f, 0x31, 0xff, 0x0b, 0x54, 0x47, 0x0d, 0x86, 0xdb, 0x83, 0x0d, 0x76, 0x07,
	0x1b, 0xbc, 0x1f, 0x6c, 0xb0, 0x39, 0xda, 0xc6, 0xee, 0x68, 0x1b, 0xaf, 0x47, 0xdb, 0x78, 0xc0,
	0x41, 0xa8, 0xe6, 0xcb, 0x29, 0x9e, 0xf1, 0x98, 0x94, 0xb9, 0xa4, 0xc8, 0x25, 0x4f, 0xa4, 0xfc,
	0x4b, 0xd4, 0x7a, 0xc1, 0xe4, 0xb4, 0x9e, 0x7e, 0xa2, 0xab, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xbd, 0x4a, 0x0c, 0xf4, 0x3e, 0x02, 0x00, 0x00,
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNameCard(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SentTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SentTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNameCard(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NameCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceivedInfo) > 0 {
		for iNdEx := len(m.ReceivedInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNameCard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SentInfo) > 0 {
		for iNdEx := len(m.SentInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNameCard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SelfIntro) > 0 {
		i -= len(m.SelfIntro)
		copy(dAtA[i:], m.SelfIntro)
		i = encodeVarintNameCard(dAtA, i, uint64(len(m.SelfIntro)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintNameCard(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNameCard(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNameCard(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNameCard(dAtA []byte, offset int, v uint64) int {
	offset -= sovNameCard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SentTime)
	n += 1 + l + sovNameCard(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNameCard(uint64(l))
	}
	return n
}

func (m *NameCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNameCard(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNameCard(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovNameCard(uint64(l))
	}
	l = len(m.SelfIntro)
	if l > 0 {
		n += 1 + l + sovNameCard(uint64(l))
	}
	if len(m.SentInfo) > 0 {
		for _, e := range m.SentInfo {
			l = e.Size()
			n += 1 + l + sovNameCard(uint64(l))
		}
	}
	if len(m.ReceivedInfo) > 0 {
		for _, e := range m.ReceivedInfo {
			l = e.Size()
			n += 1 + l + sovNameCard(uint64(l))
		}
	}
	return n
}

func sovNameCard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNameCard(x uint64) (n int) {
	return sovNameCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentInfo = append(m.SentInfo, &History{})
			if err := m.SentInfo[len(m.SentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedInfo = append(m.ReceivedInfo, &History{})
			if err := m.ReceivedInfo[len(m.ReceivedInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNameCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNameCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNameCard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNameCard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNameCard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNameCard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNameCard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNameCard = fmt.Errorf("proto: unexpected end of group")
)
